# BitCurator: Tools for Digital Forensics Methods and Workflows in Real-World Collecting Institutions
# ---------------------------------------------------------------------------------------------------
#
# BitCurator
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.
#
#
# See http://wiki.bitcurator.net/ for up-to-date project information.
#

Installing
----------
The included setup.py script will install the BitCurator tools in the appropriate locations. Note! If you're
using this script outside of the full BitCurator environment, there are many dependencies that may not be met
automatically. See https://github.com/bitcurator/bitcurator-boostrap for the full dependency stack.

To install:

  python3 setup.py build
  sudo python3 setup.py install

This will install the BitCurator Disk Image Access, BitCurator Mounter, and BitCurator Reporting tools.

Running the reporting tool (generate_report.py) on the command line:
--------------------------------------------------------------------
File: generate_report.py
A module for working with bulk_extractor

This module works with bulk_extractor and identify_filenames modules
and extracts the annotaed files generated by the identify_filenames
module and generates a report.

The generate_report.py script uses the python-3 port of FPDF software from
https://bitbucket.org/cyraxjoe/py3fpdf. Your local PYTHONPATH should include
the path to the py3fpdf install (where applicable).

The generate_report.py script depends on bulk_extractor output to run correctly:

1. Generate output feature files using Bulk Extractor
Example: 
bulk_extractor ~/Research/TestData/M57-Scenario/usbflashdrives/jo-work-usb-2009-12-11.aff
-o ~/Research/TestData/BEOutputs/jow-output

2. Generate text (.txt) and xml (.xml) reports using fiwalk.
Example 1: 

fiwalk -f -X /[PATH_TO_OUTPUT]/jo-work-usb-fi.xml -T /[PATH_TO_OUTPUT]/jo-work-usb-fi_T /[PATH_TO_DISK_IMAGE]/jo-work-usb-2009-12-11.aff
Example 2: fiwalk -f -X icharlie_F.xml -T icharlie_FT /[PATH_TO_DISK_IMAGE]/charlie-work-usb-2009-12-11.aff

3. Generate the annotated files from the identify_filenames utility
Ex: python3 identify_filenames.py --all --imagefile
~/Research/TestData/M57-Scenario/usbflashdrives/jo-work-usb-2009-12-11.aff
~/Research/TestData/BEOutputs/jow-output
~/Research/TestData/BEOutputs/ident-jow-output

4. Run the generate_reports script to generate the pdf reports.
(this uses the annotated feature files created in step-3, fiwalk output
created in Step-2, and bulk-extractor outputs created in step-1)
Ex: python3 generate_report.py --pdf_report
--fiwalk_xmlfile ~/Research/TestData/BEOutputs_131/charlie_fi_F.txt
--annotated_dir ~/Research/TestData/BEOutputs_131/annotated_charlie_output
--outdir ~/Research/TestData/BEOutputs_131/charlie_rep_outdir
OR
Ex: python3 generate_report.py --pdf_report
--fiwalk_txtfile ~/Research/TestData/BEOutputs_131/charlie_fi_FT.txt
--annotated_dir ~/Research/TestData/BEOutputs_131/annotated_charlie_output
--outdir ~/Research/TestData/BEOutputs_131/charlie_rep_outdir


